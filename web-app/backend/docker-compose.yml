services:
  server:
    platform: linux/amd64   # if needed for platform emulation
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./server:/usr/src/app/server  # mount server code for hot reload
      - ./ollama_server:/usr/src/app/ollama_serve  # mount ollama model files
    ports:
      - "5001:5001"  # Main API and WebSocket port
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
    depends_on:
      - audio_server
      - ollama
      
  audio_server:
    platform: linux/amd64
    build:
      context: .
      dockerfile: audio_server/Dockerfile
    volumes:
      - ./audio_server:/usr/src/app  # mount audio server code for hot reload
      - ./server/misc:/usr/src/app/models  # share startup.wav
    ports:
      - "8000:8000"  # FastAPI port
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]

  ollama:
    image: ollama/ollama
    container_name: ollama
    runtime: nvidia  # To use GPUs
    environment:
      - NVIDIA_VISIBLE_DEVICES=all  # Ensures the container can see all GPUs
    volumes:
      - ollama:/root/.ollama
      - ./ollama_server:/root/ollama_serve  # Mount local ollama_serve directory to the container
    ports:
      - "11434:11434"  # Expose the Ollama service on port 11434
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]
    restart: "no"
    entrypoint: ["bash", "/root/ollama_serve/serve_ollama.sh"]  # Run the custom script to create and serve the model

volumes:
  ollama:
    driver: local  # Persistent volume for Ollama